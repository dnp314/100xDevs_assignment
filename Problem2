#include<bits/stdc++.h>
using namespace std;

//Problem Statement

//Subarray with Given XOR
//Given an array of integers and an integer target_xor, find the number of subarrays having XOR equal to target_xor.

int subarraysWithGivenXOR(vector<int>& nums, int target_xor) {
    unordered_map<int, int> prefixXORCount;
    int xorCumulative = 0;
    int count = 0;

    for (int num : nums) {
        xorCumulative ^= num;

        
        if (xorCumulative == target_xor) {
            count++;
        }

        int neededXOR = xorCumulative ^ target_xor;
        if (prefixXORCount.find(neededXOR) != prefixXORCount.end()) {
            count += prefixXORCount[neededXOR];
        }

        prefixXORCount[xorCumulative]++;
    }

    return count;
}

void testSubarraysWithGivenXOR() {
    // Test Case 1
    {
        vector<int> nums = {4, 2, 2, 6, 4};
        int target_xor = 6;
        int expected = 4;
        int result = subarraysWithGivenXOR(nums, target_xor);
        cout << "Test Case 1 - Expected: " << expected << ", Result: " << result << endl;
    }

    // Test Case 2
    {
        vector<int> nums = {5, 6, 7, 8, 9};
        int target_xor = 5;
        int expected = 2;
        int result = subarraysWithGivenXOR(nums, target_xor);
        cout << "Test Case 2 - Expected: " << expected << ", Result: " << result << endl;
    }

    // Test Case 3
    {
        vector<int> nums = {1, 2, 3, 4, 5};
        int target_xor = 4;
        int expected = 2;
        int result = subarraysWithGivenXOR(nums, target_xor);
        cout << "Test Case 3 - Expected: " << expected << ", Result: " << result << endl;
    }

    // Test Case 4
    {
        vector<int> nums = {10, 15, 7, 6};
        int target_xor = 5;
        int expected = 1;
        int result = subarraysWithGivenXOR(nums, target_xor);
        cout << "Test Case 4 - Expected: " << expected << ", Result: " << result << endl;
    }

    // Test Case 5
    {
        vector<int> nums = {1, 1, 1, 1};
        int target_xor = 0;
        int expected = 0;
        int result = subarraysWithGivenXOR(nums, target_xor);
        cout << "Test Case 5 - Expected: " << expected << ", Result: " << result << endl;
    }

    // Test Case 6
    {
        vector<int> nums = {1, 2, 3, 4, 5};
        int target_xor = 7;
        int expected = 1;
        int result = subarraysWithGivenXOR(nums, target_xor);
        cout << "Test Case 6 - Expected: " << expected << ", Result: " << result << endl;
    }

    // Test Case 7
    {
        vector<int> nums = {-1, -2, 3, -4, 5};
        int target_xor = -1;
        int expected = 2;
        int result = subarraysWithGivenXOR(nums, target_xor);
        cout << "Test Case 7 - Expected: " << expected << ", Result: " << result << endl;
    }

    // Test Case 8
    {
        vector<int> nums = {1, 3, 3, 1, 5, 6};
        int target_xor = 2;
        int expected = 3;
        int result = subarraysWithGivenXOR(nums, target_xor);
        cout << "Test Case 8 - Expected: " << expected << ", Result: " << result << endl;
    }

    // Test Case 9
    {
        vector<int> nums = {0, 0, 0, 0};
        int target_xor = 0;
        int expected = 10; // Every subarray of 0s will have XOR 0
        int result = subarraysWithGivenXOR(nums, target_xor);
        cout << "Test Case 9 - Expected: " << expected << ", Result: " << result << endl;
    }

    // Test Case 10
    {
        vector<int> nums = {1, 1, 2, 3, 1, 2, 3, 1};
        int target_xor = 1;
        int expected = 5;
        int result = subarraysWithGivenXOR(nums, target_xor);
        cout << "Test Case 10 - Expected: " << expected << ", Result: " << result << endl;
    }
}

int main() {
    testSubarraysWithGivenXOR();
    return 0;
}
