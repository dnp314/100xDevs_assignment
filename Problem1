#include <bits/stdc++.h>
using namespace std;

//Problem Statement

//Group Anagrams
//Given a list of words, write a function to group the words that are anagrams of each other.

vector<vector<string>> groupAnagrams(vector<string>& words) {
    unordered_map<string, vector<string>> anagramsMap;

    for (string word : words) {
        
        string sortedWord = word;
        sort(sortedWord.begin(), sortedWord.end());

        
        anagramsMap[sortedWord].push_back(word);
    }

    
    vector<vector<string>> groupedAnagrams;
    for (auto it : anagramsMap) {
        groupedAnagrams.push_back(it.second);
    }

    return groupedAnagrams;
}

void printGroupedAnagrams(const vector<vector<string>>& groupedAnagrams) {
    for (const auto& group : groupedAnagrams) {
        cout << "[ ";
        for (const string& word : group) {
            cout << word << " ";
        }
        cout << "]" << endl;
    }
}

void testGroupAnagrams() {
    // Test Case 1
    {
        vector<string> words = {"eat", "tea", "tan", "ate", "nat", "bat"};
        vector<vector<string>> expected = {{"eat", "tea", "ate"}, {"tan", "nat"}, {"bat"}};
        vector<vector<string>> result = groupAnagrams(words);

        cout << "Test Case 1 - Result: " << endl;
        printGroupedAnagrams(result);
        cout << endl;
    }

    // Test Case 2
    {
        vector<string> words = {"listen", "silent", "enlist", "inlets", "google", "gogole"};
        vector<vector<string>> expected = {{"listen", "silent", "enlist", "inlets"}, {"google", "gogole"}};
        vector<vector<string>> result = groupAnagrams(words);

        cout << "Test Case 2 - Result: " << endl;
        printGroupedAnagrams(result);
        cout << endl;
    }

    // Test Case 3
    {
        vector<string> words = {"rat", "tar", "art", "star", "tars", "tsar"};
        vector<vector<string>> expected = {{"rat", "tar", "art"}, {"star", "tars", "tsar"}};
        vector<vector<string>> result = groupAnagrams(words);

        cout << "Test Case 3 - Result: " << endl;
        printGroupedAnagrams(result);
        cout << endl;
    }

    // Test Case 4
    {
        vector<string> words = {"a", "b", "c", "a"};
        vector<vector<string>> expected = {{"a", "a"}, {"b"}, {"c"}};
        vector<vector<string>> result = groupAnagrams(words);

        cout << "Test Case 4 - Result: " << endl;
        printGroupedAnagrams(result);
        cout << endl;
    }

    // Test Case 5
    {
        vector<string> words = {"abc", "bca", "cab", "xyz", "yzx", "zxy", "xy", "yx"};
        vector<vector<string>> expected = {{"abc", "bca", "cab"}, {"xyz", "yzx", "zxy"}, {"xy", "yx"}};
        vector<vector<string>> result = groupAnagrams(words);

        cout << "Test Case 5 - Result: " << endl;
        printGroupedAnagrams(result);
        cout << endl;
    }

    // Test Case 6
    {
        vector<string> words = {"abcd", "dcba", "bcda", "dabc", "ab", "ba", "a", "b"};
        vector<vector<string>> expected = {{"abcd", "dcba", "bcda", "dabc"}, {"ab", "ba"}, {"a"}, {"b"}};
        vector<vector<string>> result = groupAnagrams(words);

        cout << "Test Case 6 - Result: " << endl;
        printGroupedAnagrams(result);
        cout << endl;
    }
}

int main() {
    testGroupAnagrams();
    return 0;
}

